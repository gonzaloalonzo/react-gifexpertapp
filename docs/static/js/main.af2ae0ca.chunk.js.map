{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,0BAAMC,SAXY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA0BO,OACxCN,EAAc,QAUd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAvBe,SAACP,GAExBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DAERC,EAFQ,iDAEwCC,UAAUH,GAFlD,+DAGKI,MAAMF,GAHX,cAGRG,EAHQ,gBAIOA,EAAKC,OAJZ,uBAIPC,EAJO,EAIPA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAV3B,kBAcPM,GAdO,4CAAF,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDV2BK,CAAc1B,GAAjCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QASrB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,eACZ,yBAAKA,UAAU,aAaZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEM3BkB,EAnCM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KAezB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAIA,4BAEE4C,EAAWpB,KAAI,SAACT,GAAD,OACb,kBAAC,EAAD,CACA2B,IAAQ3B,EACRA,SAAaA,UC3BvB8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.af2ae0ca.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport Proptypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handlerInputChange = (e) => {\r\n\r\n        setinputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handlerSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2){\r\n            setCategories((cats) => [ inputValue,...cats]);\r\n            setinputValue(' ');\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {\r\n            handlerSubmit\r\n        }>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handlerInputChange}\r\n            />\r\n        </form>\r\n    )    \r\n}\r\nAddCategory.propTypes = {\r\n  setCategories: Proptypes.func.isRequired\r\n}; ","\r\n\r\nexport const getGifs= async(category) =>{\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=VuQTMYpaB1tNHD5WkVf44bqEs539jaH1`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img =>{\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url:img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        \r\n        return gifs;\r\n} ","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n//import {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n     const {data:images, loading} = useFetchGifs( category );\r\n\r\n\r\n    /* const [images, setImages] = useState([]);\r\n     useEffect(() => {\r\n    //   getGifs(category)\r\n    //   .then(setImages);\r\n    // }, [category])// solo se ejecuta por una vez.*/\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n        {loading && <p className='animate__animated animate__flash'> Loading...</p>}\r\n        <div className=\"card-grid\">\r\n          {/*\r\n        <ol>{images.map(img => (\r\n            <li key = {img.id}>{img.title}</li>\r\n        ))\r\n        }</ol>\r\n        <ol>\r\n            desetructurado\r\n          {images.map(( {id, title} ) => (\r\n            <li key={id}>{title}</li>\r\n          ))}\r\n        </ol>*/}\r\n\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; //data:[], loading: true\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n//const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  // const handlerAdd = () => {\r\n\r\n  //   setcategories(cats => [\"HunterXHunter\",...cats, ]);\r\n  //   operador spread mantinen el estado anterior y agrega una nueva al final\r\n  //   setcategories(cats => [...cats, \"HunterXHunter\"]);\r\n  //   operador spread mantinen el estado anterior y agrega una nueva al final\r\n  //   setcategories([...categories, \"HunterXHunter\"]);\r\n\r\n  //   operador spread mantinen el estado anterior y agrega una nueva al inicio\r\n  //   setcategories([\"HunterXHunter\", ...categories]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories = {setCategories}/>\r\n      <hr />\r\n\r\n      {/*<button onClick={handlerAdd}>Agregar</button>*/}\r\n\r\n      <ol>\r\n        {\r\n        categories.map((category) => ( \r\n          <GifGrid\r\n          key = { category }\r\n          category = { category } />\r\n        ))\r\n        }\r\n      </ol>\r\n      </>\r\n  );\r\n};\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}